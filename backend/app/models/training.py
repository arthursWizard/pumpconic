from datetime import date
from sqlalchemy import (
    JSON,
    Boolean,
    Column,
    Date,
    Enum,
    ForeignKey,
    SmallInteger,
    String,
    Text,
    UniqueConstraint,
)
from sqlalchemy.orm import relationship
from app.db.base import Base
from app.models.enums.exercise_intensity import ExerciseIntensity
from app.models.enums.weekday import Weekday
from uuid import uuid4


class AutoId(Base):
    """
    Automatically generated Id model base
    """
    
    __abstract__ = True

    id = Column(String(36), primary_key=True, index=True, default=uuid4)
    """Uuid v4 autogenerated Id"""


class BaseInfo(AutoId):
    """
    Base shared information model
    """
    
    __abstract__ = True

    name = Column(String(100), index=True, nullable=False)
    """Name of the item"""
    
    notes = Column(Text, default=None)
    """Some additional information about the item"""


class Program(BaseInfo):
    """
    Program grouping that embodies a period of training
    """

    __tablename__ = "programs"

    label = Column(String(16), default=None)
    """Tag like super-grouping for clustering multiple programs"""
    
    create_date = Column(Date, nullable=False, default=date.today())
    """Date when the program was created"""
    
    trainings = relationship("Training", backref="programs", cascade="all, delete")
    """All different trainings that belong to this program"""


class Training(BaseInfo):
    """
    One day worth of exercises that should be performed
    """

    __tablename__ = "trainings"

    day_of_the_week = Column(Enum(Weekday), default=None)
    """Proposed day of the week when this training should be held"""
    
    order = Column(SmallInteger, nullable=False)
    """Priority value at which the training should be performed"""

    program_id = Column(String(36), ForeignKey("programs.id"), nullable=False)
    """A program this training belongs to"""

    exercises = relationship("Exercise", backref="trainings", cascade="all, delete")
    """All differrent exercises that belong to this training"""

    __table_arg__ = UniqueConstraint("order", "program_id", name="_order_program_uc")


class Exercise(BaseInfo):
    """
    Exercise to be performed
    """
    
    __tablename__ = "exercises"

    intensity = Column(Enum(ExerciseIntensity), nullable=False)
    """Type of effort that should be input to perform this exercise"""
    
    order = Column(SmallInteger, nullable=False)
    """Priority for the exercise in the day"""
    
    training_id = Column(String(36), ForeignKey("trainings.id"), nullable=False)
    """A training this exercise belongs to"""
    
    activities = relationship("Activity", backref="exercises", cascade="all, delete")
    """All recorded activities done for this exercise"""

    __table_arg__ = UniqueConstraint("order", "training_id", name="_order_training_uc")


class Activity(AutoId):
    """
    Representation of physical training performed and the outcome of it
    """
    
    __tablename__ = "activities"

    create_date = Column(Date, nullable=False, default=date.today())
    """Date the activity was recorded"""
    
    alternative_exercise = Column(String(100), default=None)
    """Substitute exercise that may have been performed"""
    
    sets = Column(JSON, nullable=False)
    """Sets and reps performed and weight used"""
    
    increase_effort = Column(Boolean, nullable=False, default=False)
    """Should the weight be increased for the next training"""
    
    exercise_id = Column(String(36), ForeignKey("exercises.id"), nullable=False)
    """An exercise this activity belongs to"""
